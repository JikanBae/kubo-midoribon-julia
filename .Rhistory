library(tuneR)
rawdat <- read.csv("rawData.csv", header=TRUE, row.names=1)
rawdat$Number <- factor(rawdat$Number)
rawdat$Algorithm <- factor(rawdat$Algorithm)
rawdat$Songs <- factor(rawdat$Songs)
rawdat$Section <- factor(rawdat$Section)
source("~/develop/r/anovakun_482.txt", encoding="CP932")
rawdat <- read.csv("rawData.csv", header=TRUE, row.names=1)
rawdat$Number <- factor(rawdat$Number)
rawdat$Songs <- factor(rawdat$Songs)
rawdat$Algorithm <- factor(rawdat$Algorithm)
rawdat$Section <- factor(rawdat$Section)
res.aov <- aov(Number * Songs * Algorithm, data=rawdat)
summary(rawdat)
rawdat <- read.csv("rawData.csv", header=TRUE, row.names=1)
rawdat$Number <- factor(rawdat$Number)
rawdat$Songs <- factor(rawdat$Songs)
rawdat$Algorithm <- factor(rawdat$Algorithm)
rawdat$Section <- factor(rawdat$Section)
res.aov <- aov(Number * Songs * Algorithm, data=rawdat)
res.aov <- aov(rawdat$Number * Songs * Algorithm, data=rawdat)
res.aov <- aov(rawdat$Number * rawdat$Songs * rawdat$Algorithm, data=rawdat)
res.aov <- aov(Number * Songs * Algorithm, data=rawdat)
res.aov <- aov(Number * Songs * Algorithm, data=rawdat)
rawdat <- read.csv("rawData.csv", header=TRUE, row.names=1)
rawdat$Number <- factor(rawdat$Number)
rawdat$Songs <- factor(rawdat$Songs)
rawdat$Algorithm <- factor(rawdat$Algorithm)
rawdat$Section <- factor(rawdat$Section)
res.aov <- aov(Number * Songs * Algorithm, data=rawdat)
rawdat
head(rawdat)
res.aov <- aov(Number * Songs * Algorithm + Error(Person), data=rawdat)
res.aov <- aov(Songs * Algorithm + Error(Person), data=rawdat)
res.aov <- aov(S_Volume ~ Songs * Algorithm + Error(Person), data=rawdat)
library(tuneR)
rawdat <- read.csv("rawData.csv", header=TRUE, row.names=1)
rawdat$Number <- factor(rawdat$Number)
rawdat$Songs <- factor(rawdat$Songs)
rawdat$Algorithm <- factor(rawdat$Algorithm)
rawdat$Section <- factor(rawdat$Section)
summary(res.aov)
res.aov <- aov(S_Volume ~ Songs * Algorithm * Section + Error(Person/(Songs*Algorithm*Section)), data=rawdat)
summary(res.aov)
plot(rawdat$Songs, rawdat$S_Volume)
plot(rawdat$Songs, rawdat$V_Volume)
plot(rawdat$S_Volume ~ rawdat$Songs)
plot(rawdat$V_Volume ~ rawdat$Songs * rawdat$Algorithm)
plot(rawdat$S_Volume ~ rawdat$Songs, type="b")
res.aov <- aov(S_Volume ~ Songs * Algorithm + Error(Person/(Songs*Algorithm)), data=rawdat)
summary(res.aov)
res.aov <- aov(S_Volume ~ Songs * Algorithm), data=rawdat)
res.aov <- aov(S_Volume ~ Songs * Algorithm, data=rawdat)
summary(res.aov)
library(tuneR)
rawdat <- read.csv("rawData.csv", header=TRUE, row.names=1)
rawdat$Number <- factor(rawdat$Number)
rawdat$Songs <- factor(rawdat$Songs)
rawdat$Algorithm <- factor(rawdat$Algorithm)
rawdat$Section <- factor(rawdat$Section)
plot(rawdat$S_Volume ~ rawdat$Songs)
plot(rawdat$V_Volume ~ rawdat$Songs)
res.aov <- aov(S_Volume ~ Songs * Algorithm * Section + Error(Person/(Songs*Algorithm*Section)), data=rawdat)
summary(res.aov)
res.aov <- aov(S_Volume ~ Songs * Algorithm + Error(Person/(Songs*Algorithm)), data=rawdat)
summary(res.aov)
?mean
X1 <- rnorm(100, 50, 10)
hist(X1)
rug(X1)
B =
0.2557   -0.5115   -0.2557    1.0230   -0.2557   -0.5115    0.2557
A =
1.0000   -4.0196    6.1894   -4.4532    1.4208   -0.1418    0.0044
B = c(0.2557  , -0.5115  , -0.2557   , 1.0230  , -0.2557  , -0.5115,    0.2557)
A = c(1.0000,   -4.0196,    6.1894 ,  -4.4532,    1.4208 ,  -0.1418 ,   0.0044)
library(signal)
?freqz
?Arma
fltr = Arma(B, A)
?freqz
freqz(fltr)
fltr
b <- c(1, 0, -1)
a <- c(1, 0, 0, 0, 0.25)
freqz(b, a)
b <- c(1, 0, -1)
a <- c(1, 0, 0, 0, 0.25)
freqz(b)
b <- c(1, 1); freqz(b)
freqz(c(1, 0.8))
freqz(c(1, 0, 0.8))
freqz(c(1, 0, 0, 0.8))
freqz(c(1, 0, 0, 0.8), c(1, 0.5))
freqz(c(1, 0, 0, 0.8), c(1, 0.75))
freqz(c(1, 0, 0, 0.8), c(1, 0.9))
freqz(B, A)
B
A
freqz(A, B)
?freqz
freqz(A, B, Fs=44100)
?filter
freqz(c(1), c(1, 0.8))
B
A
freqz(B)
freqz(A)
freqz(B)
freqz(B, -A)
freqz(B, c(1.0000, 4.0196, -6.1894, 4.4532, -1.4208, 0.1418, -0.0044))
freqz(B, c(1.0000, 4.0196, -6.1894, 4.4532, -1.4208, 0.1418, -0.0044), Fs=44100)
res <- freqz(B, c(1.0000, 4.0196, -6.1894, 4.4532, -1.4208, 0.1418, -0.0044), Fs=44100)
res$h
res$w
res$f
plot(res$f, abs(res$h), scale=xlog)
plot(res$f, abs(res$h))
plot(res$f, abs(res$h), log="x")
plot(res$f, abs(res$h), log=x)
plot(res$f, abs(res$h), log="x")
plot(res$f, 20*log10(abs(res$h)), log="x")
B
freqz(-B, c(1.0000, 4.0196, -6.1894, 4.4532, -1.4208, 0.1418, -0.0044), Fs=44100)
freqz(B, c(1.0000, 4.0196, -6.1894, 4.4532, -1.4208, 0.1418, -0.0044), Fs=44100)
freqz(-B, A, Fs=44100)
freqz(B, A, Fs=44100)
freqz(B, -A, Fs=44100)
freqz(B, c(4.0196, -6.1894, 4.4532, -1.4208, 0.1418, -0.0044), Fs=44100)
?freqz
?Arma
filt <- Arma(b = c(1, 2, 1)/3, a = c(1, 1))
zplane(filt)
A
B
filt <- Arma(b = c(1, 2, 1)/3, a = c(1, 1))
freqz(filt)
B
A
freqz(B, A)
freqz
signal::freqs(B, A)
fltr = Arma(B, A)
freqs(fltr)
freqz(fltr)
res <- freqz(fltr)
res
res$h
res$f
plot(res$f, 20*log10abs(res$h), log="x")
plot(res$f, 20*log10*abs(res$h), log="x")
plot(res$f, 20*log10(abs(res$h)), log="x")
res <- freqz(fltr, Fs=44100)
plot(res$f, 20*log10(abs(res$h)), log="x")
res <- freqz(fltr, Fs=44100)
res <- freqz(fltr, Fs=44100, n=2048)
plot(res$f, 20*log10(abs(res$h)), log="x", type="l")
x <- rnorm(44100)
x <- x / max(abs(x))
plot(x, type="l")
?filter
y <- signal::filter(fltr, x)
summary(y)
plot(y, type="l")
library(psych)
?fa
q()
library(psych)
?fa
?factanal
?fa
install.packages(c("knitr", "StanHeaders"))
library("effsize", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library(pwr)
install.packages(pwr)
install.packages("pwr")
library(pwr)
?pwr
tyuu2 <- c(8,12,11,20,16,18,7,19,20,14,14,12,16,14,13,17,19,10,19,14)
syou6 <- c(4,9,14,16,15,14,7,13,18,20,12,6,10,16,12,16,13,12,12,15)
sd(tyuu2)
sd(syou6)
sd(syou6 - tyuu2)
sd(syou6 - tyuu2) / sqrt(20)
mean(syou6-tyuuu2) / (sd(syou6 - tyuu2) / sqrt(20))
mean(syou6-tyuu2) / (sd(syou6 - tyuu2) / sqrt(20))
mean(tyuu2-syou6) / (sd(syou6 - tyuu2) / sqrt(20))
library(rstan)
rstan_options()
?rstan
library(rstan)
?sampling
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
q()
library(psych)
?fa
?fa
for (i in 1:10) {}
for (i in 1:10) {disp(i); i<-i+1}
for (i in 1:10) {cat(i); i<-i+1}
?for
)
help("for")
setwd("~/Dropbox/_julia/kubo_midoribon")
d <- read.csv("data4a.csv")
d
summary(d)
d <- read.csv("data4a.csv")
summary(d)
logistic <- function(z) 1 - (1 + exp(-z))
z <- seq(-6, 6, 0.1)
plot(z, logistic(z), type="l")
logistic <- function(z) 1 / (1 + exp(-z))
z <- seq(-6, 6, 0.1)
plot(z, logistic(z), type="l")
glm(cbind(y, N-y) ~ x + f, data=d, family=binomial)
fit.xf <- glm(cbind(y, N-y) ~ x + f, data=d, family=binomial)
fit.xf <- glm(cbind(y, N-y) ~ x + f, data=d, family=binomial)
fit.xf
library(MASS)
stepAIC(fit.xf)
?glm
?binomial
binomial(3)
binomial(logexp(3))
